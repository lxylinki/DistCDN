CS5700 Project 5 Report (Xiangyu Lin, Chenxi Shi)

-------------------------------------------------------------------------------
Design Decisions


The CDN in this project consists of DNS and HTTP servers running at each 
replica host, along with the mapping code for dynamic IP resolution. 
We assume that the total number of servers is fixed, and provide the public 
IP addresses of them in a configurable text file named 'hosts' in format of
one IP per line. We also assume that, a pre-configured password-less user 
account has been set up on each of the given server. The default user in 
our project is 'cdn'. Our implementation also handles private key login 
if key files are available, this feature is currently not in use as the
default account login is configured as both password and key-less.


An external database for IP geographic location lookup is utilized before
the code deployment. On a base server outside CDN replicas 
(e.g. personal computer, login.ccs.neu.edu, cs5700cdnproject.ccs.neu.edu, 
etc. these are two working bases with user account 'lxylinki'). 


Executing ./deplyCDN will first set the proper executing permissions on
scripts and install required Python libraries on the base server. This is 
necessary since the base server is responsible for the static geographical 
distance calculation. The database file will be stored and queried only 
at base server by the calcutation functions in init.py. 
deployCDN script uses those functions to generate a server-specific file 
to copy together with code to each replica servers. This offline calculation
part is not included in our submission, instead, ready-to-use neighbor lists
are submitted.


After arrive at replica server, the file is renamed to 'my_neighbors' to 
overcome the difference between public/private IP addresses. 
It contains the IP addresses of servers that are located nearer than the 
original server to local host. When some pages are cached at those servers,
they become preferred choices for the local host than origin server. 
-------------------------------------------------------------------------------
Evaluation Methodology

The deployment cycle of this CDN is:
(./stopCDN if runned previously)

./deployCDN
./runCDN
./stopCDN

Detailed screen captued steps: screen_captures folder:
1-deployCDN.png                    execution of ./deployCDN
2-runCDN.png                       execution of ./runCDN
2.1-time_dig.png                   execution of dig command on dnsserver
2.2-time_wget.png                  execution of wget command on httpserver
2.3-wget_redirect_to_neighbor.png  a redirection to peers who has the cache
3-stopCDN.png                      execution of ./stopCDN
3.1-exit_verify.png                servers can be verified to be exited
 

The servers are evaluated with standard dig and wget commands:

dig @172.31.7.167 -p 65533 cs5700cdn.example.com
wget http://172.31.7.167:65533/wiki/Main_Page

where the IP addresses are replica servers' addresses returned by DNS server,
port number is the default port we set for this project. Performance is 
evaluated by timing the commands execution time. Our servers respond at least
as fast as the origin server: when CDN is initially deployed, no cache presents
in all replicas, and most request will be redirected to the origin; after 
some cache accumulated at each replica server, the response time is 
significantly decreased.


Although the user account in this project does not require keys, the private
key can be provided through command line arguments, default values can also
be overwritten this way:

./runCDN \
-p 65533 -o 54.88.98.7 -n cs5700cdn.example.com -u lxylinki -i ~/.ssh/id_rsa
./runCDN \
-p 65533 -o 54.88.98.7 -n cs5700cdn.example.com -u lxylinki -i ~/.ssh/id_rsa
./stopCDN \
-p 65533 -o 54.88.98.7 -n cs5700cdn.example.com -u lxylinki -i ~/.ssh/id_rsa
-------------------------------------------------------------------------------
Future Work

1. Improve the message passing and caching straegy.
   We currently adopted simple strategy for cache replacement: when cache size
   reaches near the assigned quota, the file which is smallest in size will be
   deleted. This may not be optimal since it does not take into account 
   various other aspects of interest, such as content popularity, availability 
   within near neighbors, etc.

2. Implement multi-threaded server. 
   A parallel server can enhance the efficiency handling multiple concurrent
   requests simultaneously.

3. Intellegently reduce the broadcast range of cache update messages.
   In our current design, cache update and deletion are broadcasted as short 
   messages to all peers in CDN; however, upon the receipt of cache update 
   messages, a DNS server only take action if it came from one of local host's
   neighbors. 

   The broadcast-to-all strategy would potentially cause scalability issue
   if more servers join the CDN.

4. For external request, take its geographic location into account when
   redirecting.
   In our current design, we assume the lookup and download requests came from
   local host or nearby servers, thus DNS server at each replica server 
   decides redirection based on cache availability and distance to local host 
   only.   
-------------------------------------------------------------------------------
